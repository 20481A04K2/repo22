steps:
  # ==========================================
  # Step 1: Wait logic for running triggers
  # ==========================================
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "Checking current trigger against actively running triggers..."

        WATCHED_TRIGGERS=("trigger-1" "trigger-3")

        CURRENT_TRIGGER="$${_TRIGGER_NAME:-trigger-2}"

        echo "Current Trigger: $CURRENT_TRIGGER"

        # Get CURRENT build info - only if it's still running or queued
        CURRENT_BUILD_INFO=$(gcloud builds list --region=asia-southeast1 \
          --filter="status:(WORKING OR QUEUED) AND substitutions.TRIGGER_NAME=$CURRENT_TRIGGER" \
          --sort-by="~createTime" --limit=1 \
          --format="value(id,createTime)")

        if [[ -z "$CURRENT_BUILD_INFO" ]]; then
          echo "No ongoing build found for $CURRENT_TRIGGER (maybe already finished)."
          exit 0
        fi

        CURRENT_BUILD_ID=$(echo "$CURRENT_BUILD_INFO" | awk '{print $1}')
        CURRENT_START_TIME=$(echo "$CURRENT_BUILD_INFO" | awk '{print $2}')

        echo "Current build $CURRENT_BUILD_ID started at: $CURRENT_START_TIME"

        wait_for_build() {
          local TRIGGER_NAME=$1
          local BUILD_ID=$2
          while true; do
            STATUS=$(gcloud builds describe $BUILD_ID --region=asia-southeast1 --format="value(status)")
            if [[ "$STATUS" == "SUCCESS" || "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" ]]; then
              echo "$TRIGGER_NAME build $BUILD_ID finished with $STATUS"
              break
            fi
            echo "$TRIGGER_NAME build $BUILD_ID still running, waiting 15s..."
            sleep 15
          done
          if [[ "$STATUS" == "SUCCESS" ]]; then
            echo "$TRIGGER_NAME succeeded"
          else
            echo "$TRIGGER_NAME failed/cancelled"
          fi
        }

        # =========================
        # Wait for earlier builds of the SAME trigger (time-based)
        # =========================
        SAME_TRIGGER_BUILDS=$(gcloud builds list --region=asia-southeast1 \
          --filter="status:(WORKING OR QUEUED) AND substitutions.TRIGGER_NAME=$CURRENT_TRIGGER" \
          --sort-by="createTime" \
          --format="value(id,createTime)")

        for BUILD_INFO in $SAME_TRIGGER_BUILDS; do
          BUILD_ID=$(echo $BUILD_INFO | awk '{print $1}')
          BUILD_START=$(echo $BUILD_INFO | awk '{print $2}')
          if [[ "$BUILD_START" < "$CURRENT_START_TIME" ]]; then
            echo "⏳ Waiting for previous build $BUILD_ID of same trigger ($CURRENT_TRIGGER) started at $BUILD_START..."
            wait_for_build "$CURRENT_TRIGGER" "$BUILD_ID"
          fi
        done

        # =========================
        # Wait for earlier builds of other triggers (time-based)
        # =========================
        for TRIGGER in "${WATCHED_TRIGGERS[@]}"; do
          if [[ "$TRIGGER" == "$CURRENT_TRIGGER" ]]; then
            continue
          fi

          BUILD_INFO=$(gcloud builds list --region=asia-southeast1 \
            --filter="status:(WORKING OR QUEUED) AND substitutions.TRIGGER_NAME=$TRIGGER" \
            --sort-by="~createTime" --limit=1 --format="value(id,createTime)")

          if [[ -z "$BUILD_INFO" ]]; then
            echo "No running build found for $TRIGGER, skipping."
            continue
          fi

          BUILD_ID=$(echo "$BUILD_INFO" | awk '{print $1}')
          BUILD_START=$(echo "$BUILD_INFO" | awk '{print $2}')

          if [[ "$BUILD_START" < "$CURRENT_START_TIME" ]]; then
            echo "⏳ Waiting for earlier build $BUILD_ID of trigger $TRIGGER started at $BUILD_START..."
            wait_for_build "$TRIGGER" "$BUILD_ID"
          fi
        done

        echo "✅ All earlier builds completed → proceeding with current trigger $CURRENT_TRIGGER."
